/*
 ============================================================================
 Name        : test.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

#include <math.h>
#include "test.h"
#include "main.h"




//flag == 0	//从小到大
//flag == 1	//从大到小

uint8_t float_sort_buff(float *buff, uint16_t size, uint8_t flag)
{
    int i, j = 0;
	float temp1 = 0;

    if(flag == 0)
    {
        for(j = 0; j < size - 1; j++)
        {
            for(i = 0; i < size - j - 1; i++)
            {
                if(buff[i] > buff[i + 1])
                {
                    temp1 = buff[i];
                    buff[i] = buff[i + 1];
                    buff[i + 1] = temp1;
                }
            }
        }
    }
    else if(flag == 1)
    {
        for(j = 0; j < size - 1; j++)
        {
            for(i = size - 2; i >= 0; i--)
            {
                if(buff[i] < buff[i + 1])
                {
                    temp1 = buff[i];
                    buff[i] = buff[i + 1];
                    buff[i + 1] = temp1;
                }
            }
        }
    }
	return 0;
}



//计算n秒内最大的偏移值
#define COG_BUF_SIZE    3
uint8_t is_out_max_diff(float *buf, uint8_t size, float new, float set_max_diff)
{
	uint8_t i=0;
	float left = 0;
	float right = 0;

	left = new-set_max_diff;
	right = new+set_max_diff;

	if(left<0)
	{
		left = 360+left;
	}
	if(right>360)
	{
		right = right-360;
	}

	printf("left = %f\n", left);
	printf("right = %f\n", right);

	for(i=0; i<size; i++)
	{
		if((buf[i]<left) && (buf[i]>right))
		{
			return 1;
		}
	}

	return 0;
}

uint8_t cal_data = 0;
void gps_test(void)
{
	float gps_cog[3] = {10, 350, 20};
	float gps_cog_new = 20.1;

	cal_data = is_out_max_diff(gps_cog, 3, gps_cog_new, 30);


	printf("%d\n", cal_data);

}


typedef struct
{
	int		a;
	char	b;
	char	c;
	float	d;
	char	e;
	double	f;

}PN_TYPE;

typedef struct
{
	char a;
	char b;
	double c;
	float g;
	PN_TYPE	pn;
	int i;
	char d;
	char e;
	float f;
	short h;


}TBOX_TYPE;
TBOX_TYPE tbox = {0};
void test_pn_size()
{
	int size_pn = sizeof(tbox.pn);
	printf("size_pn = %d\n", size_pn);
}


void test_priority_level()
{
	int a = 0x00;
	//if(a&0x04 == 0x04)--->if(a&(4 == 4))
	if((a&0x04) == 0x04)
	{
		printf("== > &");
	}
	else
	{
		printf("& > ==");
	}
}

int app_test(void)
{
	//left_move();

	//gps_test();
	//test_pn_size();
	test_priority_level();


	return 0;
}


